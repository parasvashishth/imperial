<?php 

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 * 
 * @inheritdoc
 */


 use Drupal\block\Entity\Block;



 
function imperial_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->id();
}



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views unformatted template suggestions.
 * 
 * @inheritdoc
 */
function imperial_theme_suggestions_views_view_grid_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_grid__' . $variables['view']->id();
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views unformatted template suggestions.
 * 
 * @inheritdoc
 */
function imperial_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
}



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add custom template suggestion for single category pages.
 */
function imperial_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  
  // Check if the term is from the "specialities" vocabulary.
  if ($term->bundle() == 'specialities') {
    $suggestions[] = 'taxonomy-term--specialities-single';
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for views templates.
 */
function imperial_theme_suggestions_views_view_page_alter(array &$suggestions, array $variables) {
  // Get the current view's ID and display ID.
  $view_id = $variables['view']->id();
  $display_id = $variables['display_id'];

  // Check if the view is the one you want to target.
  if ($view_id == 'our_specialities' && $display_id == 'page_1') {
    $suggestions[] = 'views_view__taxonomy_term__page_1';
  }
}


$suggestions[] = 'views_view__taxonomy_term__page_1';


function imperial_theme_preprocess_node(&$variables) {
    // Check if the node has the desired field.
    if ($node = $variables['elements']['#node']) {
        $field_value = $node->get('field_name')->getValue();
        $variables['custom_field_value'] = $field_value;
    }

    $variables['myview'] = views_embed_view('block_1', 'block_1', $args);


}




use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;

function imperial_preprocess_page(array &$variables, $hook) {
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
        $term = Term::load($tid);
        $vid = $term->bundle();
        $parent_tid = $tid; // the parent term id
        $depth = 1; // 1 to get only immediate children, NULL to load the entire tree
        $load_entities = FALSE; // True will return loaded entities rather than ids
        $child_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parent_tid, $depth, $load_entities);
        $child_data = array();
        foreach ($child_terms as $child_term) {
            $term_obj = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($child_term->tid);
            
            $url = "";
            // Check if the field_category_image field exists and has a value
            if ($term_obj->hasField('field_category_image') && !$term_obj->get('field_category_image')->isEmpty()) {
                // Get the first item from the field (assuming it's a single value field)
                $image_field_item = $term_obj->get('field_category_image')->first();
                // Get the file entity ID from the field item
                $file_entity_id = $image_field_item->target_id;
                // Load the file entity
                $file_entity = \Drupal\file\Entity\File::load($file_entity_id);
                if ($file_entity) {
                    // Get the URL of the file
                    $url = file_create_url($file_entity->getFileUri());
                }
            }

            // Load the nodes.
            $products = \Drupal\node\Entity\Node::loadMultiple($product_query);

            // Add products to the child data array
            $child_data[$child_term->tid]['term_name'] = $child_term->name;
            $child_data[$child_term->tid]['term_img'] = $url;
            $child_data[$child_term->tid]['term_id'] = $child_term->tid;
            $child_data[$child_term->tid]['products'] = $products;

        }
        $variables['child_data'] = $child_data;
       if(empty($child_data)){
                  // Fetch products based on the subcategory
            $product_query = \Drupal::entityQuery('node')
                ->condition('type', 'products') // Replace 'product' with your content type machine name.
                ->condition('status', 1) // Published nodes
                
                ->condition('field_product_category', $tid, 'IN') // Assuming the field name is 'field_category_reference' referencing the category term.
                ->execute();

                $products = \Drupal\node\Entity\Node::loadMultiple($product_query);
                  // Check if there are products
                  if (!empty($products)) {
                    // Loop through products and print title and description
                    $product_data = array();
                foreach ($products as $product) {
                    $title = $product->getTitle();
                    $description = $product->get('body')->summary;
                    $productId = $product->id();
            
                    $image_url = ""; // Initialize the image URL variable
            
                    if ($product->hasField('field_products_data') && !$product->get('field_products_data')->isEmpty()) {
                        // Get the first item from the field (assuming it's a multi-value field)
                        $image_field_item = $product->get('field_products_data')->first();
                        
                        // Get the Media entity ID from the field item
                        $media_entity_id = $image_field_item->target_id;
            
                        // Load the Media entity
                        $media_entity = \Drupal\media\Entity\Media::load($media_entity_id);
            
                        if ($media_entity) {
                            // Get the image URL from the Media entity
                            $image_url = file_create_url($media_entity->field_media_image->entity->getFileUri());
                        }
                    }
            
            
                        $product_data[] = array(
                        'product_name' => $title,
                        'product__desc' => $description,
                        'product_image' => $image_url,
                        'product_id' => $productId,
            
                    );
                        // You can customize the output as needed
                        //echo '<pre>';
                        //print_r("Title: $title, Description: $description");
                    }
            
                  // Add $product_data to $fetchall_products
                      //$fetch_all['all_products'] = $product_data;
                    // print_r($product_data);
                    // die('f');
                } else {
                    print_r("No products found");
                }
                    $variables['product_data'] = $product_data;
       }
    }


}
  /**
   * Implements hook_theme_suggestions_page_alter().
   */
  function imperial_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $suggestions[] = 'page__' . $node->bundle();
    }
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $term = Term::load($tid);
      $suggestions[] = 'page__taxonomy__' . $term->bundle();
    }
    
  }
  

  
/**
 * Implements hook_menu_alter().
 */
function mytheme_menu_alter(&$items) {
  // Add a parent menu item.
  $items['parent'] = array(
    'title' => 'Parent Menu',
    'description' => 'Parent menu item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_custom_form'),
    'access callback' => TRUE,
  );
  
  // Add a submenu item under the parent menu item.
  $items['parent/child'] = array(
    'title' => 'Child Menu',
    'description' => 'Child menu item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_custom_child_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
}


?>